//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, {
  AxiosError,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken
} from "axios";

export interface IClient {
  /**
   * @param attempts (optional)
   * @param containerWidth (optional)
   * @param containerHeight (optional)
   * @param minRoomWidth (optional)
   * @param maxRoomWidth (optional)
   * @param minRoomHeight (optional)
   * @param maxRoomHeight (optional)
   * @return Success
   */
  generateRooms(
    attempts: number | undefined,
    containerWidth: number | undefined,
    containerHeight: number | undefined,
    minRoomWidth: number | undefined,
    maxRoomWidth: number | undefined,
    minRoomHeight: number | undefined,
    maxRoomHeight: number | undefined
  ): Promise<Room[]>;
}

export class Client implements IClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @param attempts (optional)
   * @param containerWidth (optional)
   * @param containerHeight (optional)
   * @param minRoomWidth (optional)
   * @param maxRoomWidth (optional)
   * @param minRoomHeight (optional)
   * @param maxRoomHeight (optional)
   * @return Success
   */
  generateRooms(
    attempts: number | undefined,
    containerWidth: number | undefined,
    containerHeight: number | undefined,
    minRoomWidth: number | undefined,
    maxRoomWidth: number | undefined,
    minRoomHeight: number | undefined,
    maxRoomHeight: number | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<Room[]> {
    let url_ = this.baseUrl + "/generate-rooms?";
    if (attempts === null)
      throw new Error("The parameter 'attempts' cannot be null.");
    else if (attempts !== undefined)
      url_ += "attempts=" + encodeURIComponent("" + attempts) + "&";
    if (containerWidth === null)
      throw new Error("The parameter 'containerWidth' cannot be null.");
    else if (containerWidth !== undefined)
      url_ += "containerWidth=" + encodeURIComponent("" + containerWidth) + "&";
    if (containerHeight === null)
      throw new Error("The parameter 'containerHeight' cannot be null.");
    else if (containerHeight !== undefined)
      url_ +=
        "containerHeight=" + encodeURIComponent("" + containerHeight) + "&";
    if (minRoomWidth === null)
      throw new Error("The parameter 'minRoomWidth' cannot be null.");
    else if (minRoomWidth !== undefined)
      url_ += "minRoomWidth=" + encodeURIComponent("" + minRoomWidth) + "&";
    if (maxRoomWidth === null)
      throw new Error("The parameter 'maxRoomWidth' cannot be null.");
    else if (maxRoomWidth !== undefined)
      url_ += "maxRoomWidth=" + encodeURIComponent("" + maxRoomWidth) + "&";
    if (minRoomHeight === null)
      throw new Error("The parameter 'minRoomHeight' cannot be null.");
    else if (minRoomHeight !== undefined)
      url_ += "minRoomHeight=" + encodeURIComponent("" + minRoomHeight) + "&";
    if (maxRoomHeight === null)
      throw new Error("The parameter 'maxRoomHeight' cannot be null.");
    else if (maxRoomHeight !== undefined)
      url_ += "maxRoomHeight=" + encodeURIComponent("" + maxRoomHeight) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "text/plain"
      },
      cancelToken
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGenerateRooms(_response);
      });
  }

  protected processGenerateRooms(response: AxiosResponse): Promise<Room[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Room.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Room[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Room[]>(null as any);
  }
}

export class Coordinate implements ICoordinate {
  x?: number;
  y?: number;

  constructor(data?: ICoordinate) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.x = _data["x"];
      this.y = _data["y"];
    }
  }

  static fromJS(data: any): Coordinate {
    data = typeof data === "object" ? data : {};
    let result = new Coordinate();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["x"] = this.x;
    data["y"] = this.y;
    return data;
  }
}

export interface ICoordinate {
  x?: number;
  y?: number;
}

export class Room implements IRoom {
  topLeft?: Coordinate;
  topRight?: Coordinate;
  bottomLeft?: Coordinate;
  bottomRight?: Coordinate;
  height?: number;
  width?: number;

  constructor(data?: IRoom) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.topLeft = _data["topLeft"]
        ? Coordinate.fromJS(_data["topLeft"])
        : <any>undefined;
      this.topRight = _data["topRight"]
        ? Coordinate.fromJS(_data["topRight"])
        : <any>undefined;
      this.bottomLeft = _data["bottomLeft"]
        ? Coordinate.fromJS(_data["bottomLeft"])
        : <any>undefined;
      this.bottomRight = _data["bottomRight"]
        ? Coordinate.fromJS(_data["bottomRight"])
        : <any>undefined;
      this.height = _data["height"];
      this.width = _data["width"];
    }
  }

  static fromJS(data: any): Room {
    data = typeof data === "object" ? data : {};
    let result = new Room();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["topLeft"] = this.topLeft ? this.topLeft.toJSON() : <any>undefined;
    data["topRight"] = this.topRight ? this.topRight.toJSON() : <any>undefined;
    data["bottomLeft"] = this.bottomLeft
      ? this.bottomLeft.toJSON()
      : <any>undefined;
    data["bottomRight"] = this.bottomRight
      ? this.bottomRight.toJSON()
      : <any>undefined;
    data["height"] = this.height;
    data["width"] = this.width;
    return data;
  }
}

export interface IRoom {
  topLeft?: Coordinate;
  topRight?: Coordinate;
  bottomLeft?: Coordinate;
  bottomRight?: Coordinate;
  height?: number;
  width?: number;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}
